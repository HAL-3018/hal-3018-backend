'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A Request object containing all the compiled information about this request.
 *
 * @property {string} host the host used for this API call
 * @property {number} port the port for this API call. Standard set to 443.
 * @property {boolean} ssl wether this API call uses SSL
 * @property {string} scheme the scheme inferred from the SSL state
 * @property {string} verb the HTTP method, for example `GET` or `POST`
 * @property {string} path the full path of the API endpoint
 * @property {Object} params the parameters to pass in the query or body
 * @property {string} queryPath the path and query string used for the API call
 * @property {string} bearerToken the authentication token
 * @property {string} clientVersion the version of the Amadeus library
 * @property {string} languageVersion the version of Node used
 * @property {string} appId the custom ID of the application using this library
 * @property {string} appVersion the custom version of the application
 *  using this library
 * @property {Object} headers the request headers
 *
 * @param {Object} options
 */
var Request = function () {
  function Request(options) {
    _classCallCheck(this, Request);

    this.host = options.host;
    this.port = options.port;
    this.ssl = options.ssl;
    this.scheme = this.ssl ? 'https' : 'http';
    this.verb = options.verb;
    this.path = options.path;
    this.params = options.params;
    this.queryPath = this.fullQueryPath();
    this.bearerToken = options.bearerToken;
    this.clientVersion = options.clientVersion;
    this.languageVersion = options.languageVersion.replace('v', '');
    this.appId = options.appId;
    this.appVersion = options.appVersion;
    this.headers = {
      'User-Agent': this.userAgent(),
      'Accept': 'application/json, application/vnd.amadeus+json'
    };
    this.addAuthorizationHeader();
    this.addContentTypeHeader();
  }

  // PROTECTED

  /**
   * Compiles the options for the HTTP request.
   *
   * Used by Client.execute when executing this request against the server.
   *
   * @return {Object} an associative array of options to be passed into the
   *  Client.execute function
   * @protected
   */


  _createClass(Request, [{
    key: 'options',
    value: function options() {
      var options = {
        'host': this.host,
        'port': this.port,
        'protocol': `${this.scheme}:`,
        'path': this.queryPath,
        'method': this.verb,
        'headers': this.headers
      };
      return options;
    }

    /**
     * Creats the body for the API cal, serializing the params if the verb is POST.
     *
     * @return {string} the serialized params
     * @protected
     */

  }, {
    key: 'body',
    value: function body() {
      if (this.verb !== 'POST') {
        return '';
      } else {
        return _qs2.default.stringify(this.params);
      }
    }

    // PRIVATE

    /**
     * Build up the custom User Agent
     *
     * @return {string} a user agent in the format "library/version language/version app/version"
     * @private
     */

  }, {
    key: 'userAgent',
    value: function userAgent() {
      var userAgent = `amadeus-node/${this.clientVersion} node/${this.languageVersion}`;
      if (!this.appId) {
        return userAgent;
      }
      return `${userAgent} ${this.appId}/${this.appVersion}`;
    }

    /**
     * Build the full query path, combining the path with the query params if the
     * verb is 'GET'. For example: '/foo/bar?baz=qux'
     *
     * @return {string} the path and params combined into one string.
     * @private
     */

  }, {
    key: 'fullQueryPath',
    value: function fullQueryPath() {
      if (this.verb === 'POST') {
        return this.path;
      } else {
        return `${this.path}?${_qs2.default.stringify(this.params)}`;
      }
    }

    /**
     * Adds an Authorization header if the BearerToken is present
     *
     * @private
     */

  }, {
    key: 'addAuthorizationHeader',
    value: function addAuthorizationHeader() {
      if (!this.bearerToken) {
        return;
      }
      this.headers['Authorization'] = `Bearer ${this.bearerToken}`;
    }

    /**
     * Adds an Content-Type header if the HTTP method equals POST
     *
     * @private
     */

  }, {
    key: 'addContentTypeHeader',
    value: function addContentTypeHeader() {
      if (this.verb !== 'POST') {
        return;
      }
      this.headers['Content-Type'] = 'application/x-www-form-urlencoded';
    }
  }]);

  return Request;
}();

exports.default = Request;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,