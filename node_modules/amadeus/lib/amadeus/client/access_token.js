'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// The number of seconds before the token expires, when
// we will already try to refresh it
var TOKEN_BUFFER = 10;

/**
  * A helper library to create and maintain the OAuth2 AccessTokens between
  * requests. Keeps track of the expiry time and automatically tries to fetch
  * a new token if needed.
  *
  * @property {string} accessToken the cached current access token (bearer)
  * @property {number} expiresAt the aproximate time this token expires at
  * @protected
  */

var AccessToken = function () {
  function AccessToken() {
    _classCallCheck(this, AccessToken);

    this.accessToken;
    this.expiresAt;
  }

  // PROTECTED

  /**
   * Fetches or returns a cached bearer token. Used by the Client to get a
   * token before making an API call.
   *
   * @param  {Client} client the Amadeus Client to make an API call with
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   * @protected
   */


  _createClass(AccessToken, [{
    key: 'bearerToken',
    value: function bearerToken(client) {
      var emitter = new _events2.default();
      var promise = this.promise(emitter);
      this.emitOrLoadAccessToken(client, emitter);
      return promise;
    }

    // PRIVATE

    /**
     * Builds a Bluebird promise to be returned to the API user
     *
     * @param  {type} emitter the EventEmitter used to notify the Promise of
     * @return {Promise} a Bluebird promise
     * @private
     */

  }, {
    key: 'promise',
    value: function promise(emitter) {
      return new Promise(function (resolve, reject) {
        emitter.on('resolve', function (response) {
          return resolve(response);
        });
        emitter.on('reject', function (error) {
          return reject(error);
        });
      });
    }

    /**
     * Checks if the token needs a refresh, if not emits the cached token,
     * otherwise tries to load a new access token
     *
     * @param  {Client} client the Amadeus Client to make an API call with
     * @param  {type} emitter the EventEmitter used to emit the token
     * @private
     */

  }, {
    key: 'emitOrLoadAccessToken',
    value: function emitOrLoadAccessToken(client, emitter) {
      if (this.needsLoadOrRefresh()) {
        this.loadAccessToken(client, emitter);
      } else {
        emitter.emit('resolve', this.accessToken);
      }
    }

    /**
     * Checks if the token needs a refresh or first load
     *
     * @return {boolean} wether the token needs a refresh
     * @private
     */

  }, {
    key: 'needsLoadOrRefresh',
    value: function needsLoadOrRefresh() {
      if (!this.accessToken) {
        return true;
      } else if (Date.now() + TOKEN_BUFFER > this.expiresAt) {
        return true;
      } else {
        return false;
      }
    }

    /**
     * Loads the access token using the client, emits the token when it's loaded
     *
     * @param  {Client} client the Amadeus Client to make an API call with
     * @param  {type} emitter the EventEmitter used to emit the token
     * @private
     */

  }, {
    key: 'loadAccessToken',
    value: function loadAccessToken(client, emitter) {
      var _this = this;

      client.unauthenticatedRequest('POST', '/v1/security/oauth2/token', {
        'grant_type': 'client_credentials',
        'client_id': client.clientId,
        'client_secret': client.clientSecret
      }).then(function (response) {
        _this.storeAccessToken(response);
        _this.emitOrLoadAccessToken(client, emitter);
      }).catch(function (error) {
        emitter.emit('reject', error);
      });
    }

    /**
     * Stores a loaded access token, calculating the expiry date
     *
     * @param  {Response} response the response object received from the client
     * @private
     */

  }, {
    key: 'storeAccessToken',
    value: function storeAccessToken(response) {
      this.accessToken = response.result['access_token'];
      this.expiresAt = Date.now() + response.result['expires_in'];
    }
  }]);

  return AccessToken;
}();

exports.default = AccessToken;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL2NsaWVudC9hY2Nlc3NfdG9rZW4uanMiXSwibmFtZXMiOlsiVE9LRU5fQlVGRkVSIiwiQWNjZXNzVG9rZW4iLCJhY2Nlc3NUb2tlbiIsImV4cGlyZXNBdCIsImNsaWVudCIsImVtaXR0ZXIiLCJwcm9taXNlIiwiZW1pdE9yTG9hZEFjY2Vzc1Rva2VuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbiIsInJlc3BvbnNlIiwiZXJyb3IiLCJuZWVkc0xvYWRPclJlZnJlc2giLCJsb2FkQWNjZXNzVG9rZW4iLCJlbWl0IiwiRGF0ZSIsIm5vdyIsInVuYXV0aGVudGljYXRlZFJlcXVlc3QiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsInRoZW4iLCJzdG9yZUFjY2Vzc1Rva2VuIiwiY2F0Y2giLCJyZXN1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBLElBQU1BLGVBQWUsRUFBckI7O0FBRUE7Ozs7Ozs7Ozs7SUFTTUMsVztBQUNKLHlCQUFjO0FBQUE7O0FBQ1osU0FBS0MsV0FBTDtBQUNBLFNBQUtDLFNBQUw7QUFDRDs7QUFFRDs7QUFFQTs7Ozs7Ozs7Ozs7O2dDQVFZQyxNLEVBQVE7QUFDbEIsVUFBSUMsVUFBVSxzQkFBZDtBQUNBLFVBQUlDLFVBQVUsS0FBS0EsT0FBTCxDQUFhRCxPQUFiLENBQWQ7QUFDQSxXQUFLRSxxQkFBTCxDQUEyQkgsTUFBM0IsRUFBbUNDLE9BQW5DO0FBQ0EsYUFBT0MsT0FBUDtBQUNEOztBQUVEOztBQUVBOzs7Ozs7Ozs7OzRCQU9RRCxPLEVBQVM7QUFDZixhQUFPLElBQUlHLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdENMLGdCQUFRTSxFQUFSLENBQVcsU0FBWCxFQUFzQjtBQUFBLGlCQUFZRixRQUFRRyxRQUFSLENBQVo7QUFBQSxTQUF0QjtBQUNBUCxnQkFBUU0sRUFBUixDQUFXLFFBQVgsRUFBcUI7QUFBQSxpQkFBU0QsT0FBT0csS0FBUCxDQUFUO0FBQUEsU0FBckI7QUFDRCxPQUhNLENBQVA7QUFJRDs7QUFHRDs7Ozs7Ozs7Ozs7MENBUXNCVCxNLEVBQVFDLE8sRUFBUztBQUNyQyxVQUFJLEtBQUtTLGtCQUFMLEVBQUosRUFBK0I7QUFBRSxhQUFLQyxlQUFMLENBQXFCWCxNQUFyQixFQUE2QkMsT0FBN0I7QUFBd0MsT0FBekUsTUFDSztBQUFFQSxnQkFBUVcsSUFBUixDQUFhLFNBQWIsRUFBd0IsS0FBS2QsV0FBN0I7QUFBNEM7QUFDcEQ7O0FBRUQ7Ozs7Ozs7Ozt5Q0FNcUI7QUFDbkIsVUFBSSxDQUFDLEtBQUtBLFdBQVYsRUFBdUI7QUFBRSxlQUFPLElBQVA7QUFBYyxPQUF2QyxNQUNLLElBQUtlLEtBQUtDLEdBQUwsS0FBYWxCLFlBQWQsR0FBOEIsS0FBS0csU0FBdkMsRUFBa0Q7QUFBRSxlQUFPLElBQVA7QUFBYyxPQUFsRSxNQUNBO0FBQUUsZUFBTyxLQUFQO0FBQWU7QUFDdkI7O0FBR0Q7Ozs7Ozs7Ozs7b0NBT2dCQyxNLEVBQVFDLE8sRUFBUztBQUFBOztBQUMvQkQsYUFBT2Usc0JBQVAsQ0FBOEIsTUFBOUIsRUFBc0MsMkJBQXRDLEVBQW1FO0FBQ2pFLHNCQUFlLG9CQURrRDtBQUVqRSxxQkFBY2YsT0FBT2dCLFFBRjRDO0FBR2pFLHlCQUFrQmhCLE9BQU9pQjtBQUh3QyxPQUFuRSxFQUlHQyxJQUpILENBSVEsVUFBQ1YsUUFBRCxFQUFjO0FBQ3BCLGNBQUtXLGdCQUFMLENBQXNCWCxRQUF0QjtBQUNBLGNBQUtMLHFCQUFMLENBQTJCSCxNQUEzQixFQUFtQ0MsT0FBbkM7QUFDRCxPQVBELEVBT0dtQixLQVBILENBT1MsVUFBQ1gsS0FBRCxFQUFXO0FBQ2xCUixnQkFBUVcsSUFBUixDQUFhLFFBQWIsRUFBdUJILEtBQXZCO0FBQ0QsT0FURDtBQVVEOztBQUVEOzs7Ozs7Ozs7cUNBTWlCRCxRLEVBQVU7QUFDekIsV0FBS1YsV0FBTCxHQUFtQlUsU0FBU2EsTUFBVCxDQUFnQixjQUFoQixDQUFuQjtBQUNBLFdBQUt0QixTQUFMLEdBQWlCYyxLQUFLQyxHQUFMLEtBQWFOLFNBQVNhLE1BQVQsQ0FBZ0IsWUFBaEIsQ0FBOUI7QUFDRDs7Ozs7O2tCQUdZeEIsVyIsImZpbGUiOiJhY2Nlc3NfdG9rZW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5cbi8vIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBiZWZvcmUgdGhlIHRva2VuIGV4cGlyZXMsIHdoZW5cbi8vIHdlIHdpbGwgYWxyZWFkeSB0cnkgdG8gcmVmcmVzaCBpdFxuY29uc3QgVE9LRU5fQlVGRkVSID0gMTA7XG5cbi8qKlxuICAqIEEgaGVscGVyIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBtYWludGFpbiB0aGUgT0F1dGgyIEFjY2Vzc1Rva2VucyBiZXR3ZWVuXG4gICogcmVxdWVzdHMuIEtlZXBzIHRyYWNrIG9mIHRoZSBleHBpcnkgdGltZSBhbmQgYXV0b21hdGljYWxseSB0cmllcyB0byBmZXRjaFxuICAqIGEgbmV3IHRva2VuIGlmIG5lZWRlZC5cbiAgKlxuICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhY2Nlc3NUb2tlbiB0aGUgY2FjaGVkIGN1cnJlbnQgYWNjZXNzIHRva2VuIChiZWFyZXIpXG4gICogQHByb3BlcnR5IHtudW1iZXJ9IGV4cGlyZXNBdCB0aGUgYXByb3hpbWF0ZSB0aW1lIHRoaXMgdG9rZW4gZXhwaXJlcyBhdFxuICAqIEBwcm90ZWN0ZWRcbiAgKi9cbmNsYXNzIEFjY2Vzc1Rva2VuIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hY2Nlc3NUb2tlbjtcbiAgICB0aGlzLmV4cGlyZXNBdDtcbiAgfVxuXG4gIC8vIFBST1RFQ1RFRFxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIG9yIHJldHVybnMgYSBjYWNoZWQgYmVhcmVyIHRva2VuLiBVc2VkIGJ5IHRoZSBDbGllbnQgdG8gZ2V0IGFcbiAgICogdG9rZW4gYmVmb3JlIG1ha2luZyBhbiBBUEkgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtICB7Q2xpZW50fSBjbGllbnQgdGhlIEFtYWRldXMgQ2xpZW50IHRvIG1ha2UgYW4gQVBJIGNhbGwgd2l0aFxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBCbHVlYmlyZCBQcm9taXNlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGJlYXJlclRva2VuKGNsaWVudCkge1xuICAgIGxldCBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5wcm9taXNlKGVtaXR0ZXIpO1xuICAgIHRoaXMuZW1pdE9yTG9hZEFjY2Vzc1Rva2VuKGNsaWVudCwgZW1pdHRlcik7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICAvLyBQUklWQVRFXG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIEJsdWViaXJkIHByb21pc2UgdG8gYmUgcmV0dXJuZWQgdG8gdGhlIEFQSSB1c2VyXG4gICAqXG4gICAqIEBwYXJhbSAge3R5cGV9IGVtaXR0ZXIgdGhlIEV2ZW50RW1pdHRlciB1c2VkIHRvIG5vdGlmeSB0aGUgUHJvbWlzZSBvZlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIEJsdWViaXJkIHByb21pc2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByb21pc2UoZW1pdHRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBlbWl0dGVyLm9uKCdyZXNvbHZlJywgcmVzcG9uc2UgPT4gcmVzb2x2ZShyZXNwb25zZSkpO1xuICAgICAgZW1pdHRlci5vbigncmVqZWN0JywgZXJyb3IgPT4gcmVqZWN0KGVycm9yKSk7XG4gICAgfSk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHRva2VuIG5lZWRzIGEgcmVmcmVzaCwgaWYgbm90IGVtaXRzIHRoZSBjYWNoZWQgdG9rZW4sXG4gICAqIG90aGVyd2lzZSB0cmllcyB0byBsb2FkIGEgbmV3IGFjY2VzcyB0b2tlblxuICAgKlxuICAgKiBAcGFyYW0gIHtDbGllbnR9IGNsaWVudCB0aGUgQW1hZGV1cyBDbGllbnQgdG8gbWFrZSBhbiBBUEkgY2FsbCB3aXRoXG4gICAqIEBwYXJhbSAge3R5cGV9IGVtaXR0ZXIgdGhlIEV2ZW50RW1pdHRlciB1c2VkIHRvIGVtaXQgdGhlIHRva2VuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBlbWl0T3JMb2FkQWNjZXNzVG9rZW4oY2xpZW50LCBlbWl0dGVyKSB7XG4gICAgaWYgKHRoaXMubmVlZHNMb2FkT3JSZWZyZXNoKCkpIHsgdGhpcy5sb2FkQWNjZXNzVG9rZW4oY2xpZW50LCBlbWl0dGVyKTsgfVxuICAgIGVsc2UgeyBlbWl0dGVyLmVtaXQoJ3Jlc29sdmUnLCB0aGlzLmFjY2Vzc1Rva2VuKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgdG9rZW4gbmVlZHMgYSByZWZyZXNoIG9yIGZpcnN0IGxvYWRcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gd2V0aGVyIHRoZSB0b2tlbiBuZWVkcyBhIHJlZnJlc2hcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG5lZWRzTG9hZE9yUmVmcmVzaCgpIHtcbiAgICBpZiAoIXRoaXMuYWNjZXNzVG9rZW4pIHsgcmV0dXJuIHRydWU7IH1cbiAgICBlbHNlIGlmICgoRGF0ZS5ub3coKSArIFRPS0VOX0JVRkZFUikgPiB0aGlzLmV4cGlyZXNBdCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIGVsc2UgeyByZXR1cm4gZmFsc2U7IH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBhY2Nlc3MgdG9rZW4gdXNpbmcgdGhlIGNsaWVudCwgZW1pdHMgdGhlIHRva2VuIHdoZW4gaXQncyBsb2FkZWRcbiAgICpcbiAgICogQHBhcmFtICB7Q2xpZW50fSBjbGllbnQgdGhlIEFtYWRldXMgQ2xpZW50IHRvIG1ha2UgYW4gQVBJIGNhbGwgd2l0aFxuICAgKiBAcGFyYW0gIHt0eXBlfSBlbWl0dGVyIHRoZSBFdmVudEVtaXR0ZXIgdXNlZCB0byBlbWl0IHRoZSB0b2tlblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbG9hZEFjY2Vzc1Rva2VuKGNsaWVudCwgZW1pdHRlcikge1xuICAgIGNsaWVudC51bmF1dGhlbnRpY2F0ZWRSZXF1ZXN0KCdQT1NUJywgJy92MS9zZWN1cml0eS9vYXV0aDIvdG9rZW4nLCB7XG4gICAgICAnZ3JhbnRfdHlwZScgOiAnY2xpZW50X2NyZWRlbnRpYWxzJyxcbiAgICAgICdjbGllbnRfaWQnIDogY2xpZW50LmNsaWVudElkLFxuICAgICAgJ2NsaWVudF9zZWNyZXQnIDogY2xpZW50LmNsaWVudFNlY3JldFxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICB0aGlzLnN0b3JlQWNjZXNzVG9rZW4ocmVzcG9uc2UpO1xuICAgICAgdGhpcy5lbWl0T3JMb2FkQWNjZXNzVG9rZW4oY2xpZW50LCBlbWl0dGVyKTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGVtaXR0ZXIuZW1pdCgncmVqZWN0JywgZXJyb3IpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyBhIGxvYWRlZCBhY2Nlc3MgdG9rZW4sIGNhbGN1bGF0aW5nIHRoZSBleHBpcnkgZGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gIHtSZXNwb25zZX0gcmVzcG9uc2UgdGhlIHJlc3BvbnNlIG9iamVjdCByZWNlaXZlZCBmcm9tIHRoZSBjbGllbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0b3JlQWNjZXNzVG9rZW4ocmVzcG9uc2UpIHtcbiAgICB0aGlzLmFjY2Vzc1Rva2VuID0gcmVzcG9uc2UucmVzdWx0WydhY2Nlc3NfdG9rZW4nXTtcbiAgICB0aGlzLmV4cGlyZXNBdCA9IERhdGUubm93KCkgKyByZXNwb25zZS5yZXN1bHRbJ2V4cGlyZXNfaW4nXTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBY2Nlc3NUb2tlbjtcbiJdfQ==